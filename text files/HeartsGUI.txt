import java.awt.*;
import javax.swing.*;
import java.awt.event.*;

public class HeartsGUI extends JPanel implements MouseListener, MouseMotionListener {
	private HDeck cpu1;
	private HDeck cpu2;
	private HDeck cpu3;
	private HDeck player;
	private HDeck mDeck;
	private JPanel playArea;
	private JPanel inst;
	private JLabel help;								//add instructions or warnings
	private JPanel btnPanel;
	private JButton passBtn;
	private DrawCardsPlayed middle;
	private HDrawDeckPanel south;
	private HDrawDeckPanel west;
	private HDrawDeckPanel north;
	private HDrawDeckPanel east;
	private int whichCard;										//stores the card number that is selected or highlighted 
	private static boolean isPassing;							//decides which phase of game it's in	
	private final Dimension hSize = new Dimension (300, 150);		//horizontal panel size
	private final Dimension vSize = new Dimension (150, 300);		//vertical panel size
	private final Dimension mSize = new Dimension (250, 250);
	private static int hStart = 250;
	final static int gap = 20;

	public HeartsGUI()
	{
		cpu1 = new HDeck(false);								//initialize the datafields
		cpu2 = new HDeck(false);
		cpu3 = new HDeck(false);
		player = new HDeck(false);
		mDeck = new HDeck(true);
		playArea = new JPanel();
		inst = new JPanel();
		help = new JLabel("help");
		btnPanel = new JPanel();
		passBtn = new JButton(" Pass ");

		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));				//sets the properties of this jpanel
		add(playArea);
		add(inst);

		west = new HDrawDeckPanel(vSize, cpu1, "vertical");             //(x, y, width, height, deck, displaytype)
		north = new HDrawDeckPanel(hSize, cpu2, "horizontal");
		east = new HDrawDeckPanel(vSize, cpu3, "vertical");
		south = new HDrawDeckPanel(hSize, player, "horizontal");
		middle = new DrawCardsPlayed(mSize, mDeck, "stacked");

		whichCard = -1;													//initalize vars
		isPassing = false;

		playArea.setLayout(new BorderLayout());									//creates playarea
		playArea.add(middle, "Center");
		middle.setLayout(new BorderLayout());
		middle.add(btnPanel, "South");
		btnPanel.add(passBtn);
		passBtn.setPreferredSize(new Dimension(80, 30));
		passBtn.addActionListener(new PassBtnListener());
		playArea.add(south, "South");											//creates the four hands and center deck 
		playArea.add(west, "West");												//for cards played
		playArea.add(north, "North");
		playArea.add(east, "East");
		inst.add(help);

		south.addMouseMotionListener(this);										//add listeners
		south.addMouseListener (this);


		//for testing purposes
		//middle.setBorder(BorderFactory.createLineBorder(Color.black));
		/////

		passPhase();
		south.requestFocusInWindow();
	}


	public static boolean getPhase()											//returns if it's in passing phase of game
	{
		if(isPassing)
			return true;
		else
			return false;
	}

	private void passPhase()												//pass cards
	{
		dealDeck(mDeck, cpu1, cpu2, cpu3, player);								//deal the cards
		player.combSort();
		cpu1.combSort();
		cpu2.combSort();
		cpu3.combSort();
		
		player.turnFaceUp(true);													//turns player's cards face up
		isPassing = true;
		middle.setType("passing");
		passBtn.setEnabled(false);											//disables passing btn
	}

	private void startGame()												//play cards
	{
		isPassing = false;
		middle.remove(btnPanel);
		middle.revalidate();
		middle.setType("single");												//changes it to display single cards
		middle.repaint();
		south.requestFocusInWindow();
	}

	private void dealDeck (HDeck from, HDeck a, HDeck b, HDeck c, HDeck d)		//deals the deck evenly to four players
	{
		from.shuffle();
		for (int i=0; i<13; i++){
			from.dealTo(a);
			from.dealTo(b);
			from.dealTo(c);
			from.dealTo(d);
		}
	}

	private void play(HDeck from, HDeck to, int cardNo, int playerPos)					//plays a card and displays it, calls playCard	
	{
		from.playCard(to, middle, cardNo, playerPos);							//plays from player to middle
	}

	private void getCard(MouseEvent e)										//converts mouse position to card num
	{
		if (e.getX() >= 250 && e.getX() < 300+(player.getSize())*gap && e.getY() >= 15 && e.getY() <= 115)
		{																		//limits x y coordinates, limit changes depending on size of deck
			if(e.getX() >= hStart && e.getX() < hStart+gap)						//change x coordinates to number (whichCard) and then calls play based on 
				whichCard = 0;														//that card
			else if (e.getX() >= hStart+gap && e.getX() < hStart+2*gap)
				whichCard = 1;
			else if (e.getX() >= hStart+2*gap && e.getX() < hStart+3*gap)
				whichCard = 2;
			else if (e.getX() >= hStart+3*gap && e.getX() < hStart+4*gap)
				whichCard = 3;
			else if (e.getX() >= hStart+4*gap && e.getX() < hStart+5*gap)
				whichCard = 4;
			else if (e.getX() >= hStart+5*gap && e.getX() < hStart+6*gap)
				whichCard = 5;
			else if (e.getX() >= hStart+6*gap && e.getX() < hStart+7*gap)
				whichCard = 6;
			else if (e.getX() >= hStart+7*gap && e.getX() < hStart+8*gap)
				whichCard = 7;
			else if (e.getX() >= hStart+8*gap && e.getX() < hStart+9*gap)
				whichCard = 8;
			else if (e.getX() >= hStart+9*gap && e.getX() < hStart+10*gap)
				whichCard = 9;
			else if (e.getX() >= hStart+10*gap && e.getX() < hStart+11*gap)
				whichCard = 10;
			else if (e.getX() >= hStart+11*gap && e.getX() < hStart+12*gap)
				whichCard = 11;
			else if (e.getX() >= hStart+12*gap && e.getX() < hStart+13*gap)
				whichCard = 12;
			if (e.getX() >= hStart+(player.getSize())*gap)						//check if it is the last card getting clicked
				whichCard = player.getSize()-1;
		}
	}

	private void passCards()
	{
		//put in AI, right now first three cards for testing only**************************
		for(int i = 0; i<3; i++)
		{
			cpu1.selectCard(i);
			cpu2.selectCard(i);
			cpu3.selectCard(i);
		}
		
		player.passThreeCards(cpu1);
		cpu1.passThreeCards(cpu2);
		cpu2.passThreeCards(cpu3);
		cpu3.passThreeCards(player);

		cpu1.turnFaceUp(false);
		cpu2.turnFaceUp(false);
		cpu3.turnFaceUp(false);
		player.turnFaceUp(true);
		cpu1.combSort();
		cpu2.combSort();
		cpu3.combSort();
		player.combSort();

		east.setOrientation("vertical");									//resets orientation
		north.setOrientation("horizontal");
		west.setOrientation("vertical");
		south.setOrientation("horizontal");

		east.repaint();								//resets orientation
		north.repaint();
		west.repaint();
		south.repaint();

		startGame();
	}

	class PassBtnListener implements ActionListener												//pass the cards
	{																							//and starts second phase of game
		public void actionPerformed (ActionEvent e)
		{
			passCards();
		}
	}


	public void mouseDragged (MouseEvent e)                                                       //mouse listener events
	{
	}

	public void mousePressed (MouseEvent e)
	{
	}

	public void mouseReleased (MouseEvent e)
	{
	}

	public void mouseEntered (MouseEvent e)
	{
	}

	public void mouseExited (MouseEvent e)
	{
	}

	public void mouseClicked (MouseEvent e)					//used to get user's input
	{
		getCard(e);
		if (!isPassing)
			play(player, mDeck, whichCard, 4);					//states which player is playing and which card he plays, includes repaint of middle
		else 
			player.selectCard(whichCard);					//selects card and repaint				
		if(player.threeSelected()==true)
			passBtn.setEnabled(true);						//enables button
		else
			passBtn.setEnabled(false);
		
		south.repaint();									//repaints player when card is played or selected
	}

	public void mouseMoved (MouseEvent e)					//used to highlight the cards
	{	
		getCard(e);
		south.highlight(whichCard);											//highlights a card or not
		south.repaint();
	}

}

